@using Eve.Models.EveApi
@model Eve.Mvc.Models.GetBuySellOrdersViewModel
@{
    var eveUniverseTypesDictionary = (await Model.TypesTask) ?? new EveType();
}

<h1>@(eveUniverseTypesDictionary.Name)</h1>

<br />

<h3>Sell Orders</h3>
<table class="table">
    <thead>
        <tr>
            <td style="text-align: center;">Price</td>
            <td style="text-align: center;">TotalValue</td>
            <td style="text-align: center;">VolumeTotal</td>
            <td style="text-align: center;">VolumeRemain</td>
            <td style="text-align: center;">Remaining</td>
        </tr>
    </thead>
    <tbody>
        @{
            int count = 0;
            int capsuleerOrderCountCurrent = 0;
            var marketOrders = Model.MarketOrdersTask is null 
                ? new List<Order>() 
                : await Model.MarketOrdersTask;
            var userOrderIds = Model.UserOrderIdsTask is null
                ? new List<long>()
                : await Model.UserOrderIdsTask;
            var capsuleerOrderCountTotal = marketOrders.Count(mo => userOrderIds.Contains(mo.OrderId));
        }
        @foreach (var marketOrder in marketOrders
            .Where(mo => !mo.IsBuyOrder)
            .OrderBy(mo => mo.Price))
        {
            <tr
                class="@(userOrderIds.Any(oid => oid == marketOrder.OrderId) ? "bg-secondary" : "") @(count > 4 && capsuleerOrderCountTotal == capsuleerOrderCountCurrent ? "d-none" : "")">
                <td style="text-align: right;">@EveReadableIskValue(marketOrder.Price)</td>
                <td style="text-align: right;">@EveReadableIskValue(marketOrder.Price * marketOrder.VolumeRemain)</td>
                <td style="text-align: right;">@marketOrder.VolumeTotal</td>
                <td style="text-align: right;">@marketOrder.VolumeRemain</td>
                <td>@(HumanReadableTimeSpan(marketOrder.TimeRemaining))</td>
            </tr>
            count++;
            if (userOrderIds.Contains(marketOrder.OrderId)) capsuleerOrderCountCurrent++;
        }
        @if (count > 4)
        {
            <tr>
                <td colspan="6">Load more...</td>
            </tr>
        }
    </tbody>

</table>

<h3>Buy Orders</h3>
<table class="table">
    <thead>
        <tr>
            <td style="text-align: center;">Price</td>
            <td style="text-align: center;">TotalValue</td>
            <td style="text-align: center;">VolumeTotal</td>
            <td style="text-align: center;">VolumeRemain</td>
            <td style="text-align: center;">Remaining</td>
        </tr>
    </thead>
    <tbody>
        @{
            count = 0;
        }
        @foreach (var marketOrder in marketOrders.Where(mo => mo.IsBuyOrder).OrderByDescending(mo =>
                mo.Price))
        {
            <tr
                class="@(userOrderIds.Any(oid => oid == marketOrder.OrderId) ? "bg-secondary" : "") @(count > 4 ? "d-none" : "")">
                <td style="text-align: right;">@EveReadableIskValue(marketOrder.Price)</td>
                <td style="text-align: right;">@EveReadableIskValue(marketOrder.Price * marketOrder.VolumeRemain)</td>
                <td style="text-align: right;">@marketOrder.VolumeTotal</td>
                <td style="text-align: right;">@marketOrder.VolumeRemain</td>
                <td>@(HumanReadableTimeSpan(marketOrder.TimeRemaining))</td>
            </tr>
            count++;
        }
        @if (count > 4)
        {
            <tr>
                <td colspan="6">Load more...</td>
            </tr>
        }
    </tbody>
</table>

@functions {
    private string HumanReadableTimeSpan(TimeSpan t)
    {
        if (t.TotalSeconds <= 1)
        {
            return $@"{t:s\.ff} seconds";
        }
        if (t.TotalMinutes <= 1)
        {
            return $@"{t:%s} seconds";
        }
        if (t.TotalHours <= 1)
        {
            return $@"{t:%m} minutes";
        }
        if (t.TotalDays <= 1)
        {
            return $@"{t:%h} hours";
        }

        return $@"{t:%d} days";
    }

    private string EveReadableIskValue(decimal d)
    {
        if (d > 1000000000) // billion
        {
            return (d / 1000000000).ToString("F2") + "b";
        }
        if (d > 1000000) // million
        {
            return (d / 1000000).ToString("F2") + "m";
        }
        if (d > 1000) // thousand
        {
            return (d / 1000).ToString("F2") + "k";
        }
        return d.ToString("00");
    }
}