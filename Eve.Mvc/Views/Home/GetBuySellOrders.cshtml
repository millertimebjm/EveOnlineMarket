@using Eve.Models.EveApi
@model Eve.Mvc.Models.TypesViewModel
@{
    ViewData["Title"] = "Get Buy Sell Orders";
    var keywordString = Model.EveTypes.Count == 1 ? Model.EveTypes.Single().Name : "";
}

<div class="row">
    <div class="col-md-4 col-sm-6">
        <input type="text" class="form-control" id="keyword" value="@keywordString" placeholder="Keyword" style="margin-bottom: 5px;">
        <input type="button" id="searchButton" class="btn btn-primary" value="Submit">
    </div>
</div>

<div class="row">
    <div class="col-md-3">
        <div id="TypesList">
            @* @Html.Raw(await Model.TypesListPartialTask) *@
        </div>
    </div>
    <div class="col-md-9">
        <div id="BuySellOrdersList"></div>
    </div>
</div>

<input type="hidden" id="skip" value="0">
<input type="hidden" id="take" value="100">

<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', async () =>
    {
        var keywordValue = document.getElementById("keyword").value;
        if (keywordValue.length > 0) {
            await refreshTypesList(keywordValue);
        }

        var typesList = document.getElementsByClassName("typeLink");
        if (typesList.length == 0) {
            await refreshBuySellOrdersList(typesList[0].dataset.id);
        }
    }, false);

    async function refreshBuySellOrdersListEvent(event) {
        console.log("item clicked dataset: " + event.target.dataset.id);
        await refreshBuySellOrdersList(event.target.dataset.id);
    }

    async function refreshBuySellOrdersList(typeId) {
        let url = "@Url.Action("GetBuySellOrdersList")";
        url += "?typeId=" + typeId;
        console.log(url);
        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`Response status: ${response.status}`);
            }

            const text = await response.text();
            document.getElementById("BuySellOrdersList").innerHTML = text;
        } catch (error) {
            console.error(error.message);
        }
    }

    async function refreshTypesList(keyword) {
        document.getElementById("TypesList").innerHTML = "";

        let url = "@Url.Action("TypesList")";
        url += "?keyword=" + document.getElementById("keyword").value;
        url += "&skip=" + document.getElementById("skip").value;
        url += "&take=" + document.getElementById("take").value;
        console.log(url);
        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`Response status: ${response.status}`);
            }

            const text = await response.text();
            document.getElementById("TypesList").innerHTML = text;
            const links = document.getElementsByClassName("typeLink");
            for (let i = 0; i < links.length; i++) {
                links[i].onclick = async (event) => {
                    await refreshBuySellOrdersListEvent(event);
                };
                if (links.length > 1 && links[i].dataset.name.toLower() === keyword.toLower().trim()) {
                    await refreshBuySellOrdersList(links[i].dataset.id);
                }
            }
            if (links.length == 1) {
                await refreshBuySellOrdersList(links[0].dataset.id);
            }
            console.log("set typeLink events");
        } catch (error) {
            console.error(error.message);
        }
    }

    document.getElementById("searchButton").onclick = async () => {
        await refreshTypesList();
    };

    const keywordInput = document.getElementById('keyword');

    // Add event listener for keydown events
    keywordInput.addEventListener('keydown', async function (event) {
        // Check if Enter key was pressed
        if (event.key === 'Enter') {
            // Prevent default form submission behavior if needed
            event.preventDefault();

            // Call the async function
            await refreshTypesList();
        }
    });
</script>