<h1>Bill of Materials</h1>

<div class="row">
    <div class="col-8">
        <table class="table">
            <thead>
                <tr class="d-flex">
                    <th scope="col" class="col-6">Type</td>
                    <th scope="col" class="col-2">Count</td>
                    <th scope="col" class="col-2">Total</td>
                    <th scope="col" class="col-2">Actions</th>
                </tr>
            </thead>
            <tbody>
                <tr class="d-none bomRow d-flex">
                    <td class="bomRowType col-6"></td>
                    <td class="bomRowCount col-2"><input type="text" class="form-control bomRowTotalInput" size="5" value="1"></td>
                    <td class="bomRowTotal col-2"></td>
                    <td class="bomRowActions col-2"><a href="#">Split</a> <a href="#">Delete</a></td>
                </tr>
                <tr id="newRow" class="d-flex">
                    <td class="col-6">
                        <div class="input-group mb-3">
                            <input class="form-control" id="newRowName" type="text" placeholder="item or blueprint">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" id="newRowClearName">X</button>
                            </div>
                        </div>
                        <div class="list-group d-none" id="eveTypeSearchResults">
                            <a href="#" class="list-group-item list-group-item-action border-0 py-2 px-3 d-none">
                                <span class="fw-medium"></span>
                            </a>
                        </div>
                    </td>
                    <td class="col-2"><input type="text" class="form-control" size="5" id="newRowCount" value="1"></td>
                    <td class="col-2 total"></td>
                    <td class="col-2"><a href="#" id="newRowActionAdd"><i class="bi bi-file-earmark-plus"></i></a></td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<script type="text/javascript" src="~/js/searchStore.js"></script>

<script type="text/javascript">
    const eveTypeKeywordSearchStore = new SearchStore("eveTypeKeywordSearchStore");
    eveTypeKeywordSearchStore.init();

    async function eveTypesSearch(keyword) {
        const storeResults = await eveTypeKeywordSearchStore.getSearch(keyword);
        if (storeResults) {
            return storeResults.results;
        }
        const eveTypes = await getData("/home/EveTypeSearch?keyword=" + keyword);
        await eveTypeKeywordSearchStore.addSearch(keyword, eveTypes);
        return eveTypes;
    }

    async function eveTypesDisplay(eveTypes) {
        resetEveTypesDisplaySearchItems();
        const currentInputName = document.getElementById("newRowName").value.trim().toLowerCase();
        const currentInputNameEveTypeMatch = eveTypes.filter(et => et.name.toLowerCase() === currentInputName)
        if (currentInputNameEveTypeMatch.length === 1) {
            console.log("found a match: " + currentInputNameEveTypeMatch[0].type_id);
            const total = await getOrderValue(currentInputNameEveTypeMatch[0].type_id);
            document.getElementById("newRow").querySelector(".total").innerText = eveReadableIskValue(total);
            document.getElementById("newRow").querySelector(".total").setAttribute("data-price", marketOrder.price);

            document.getElementById("newRowActionAdd").classList.remove("d-none");
            return;
        }
        document.getElementById("newRowActionAdd").classList.add("d-none");
        eveTypes.forEach((eveType) => {
            addEveTypesDisplaySearchItem(eveType);
        });
    }

    async function addBillOfMaterialsRow() {
        const keyword = document.getElementById("newRowName").value.trim().toLowerCase();
        const eveTypes = await getData("/home/EveTypeSearch?keyword=" + keyword);
        const currentInputName = document.getElementById("newRowName").value.trim().toLowerCase();
        const currentInputNameEveTypeMatch = eveTypes.filter(et => et.name.toLowerCase() === currentInputName)
        if (currentInputNameEveTypeMatch.length === 1) {
            eveType = eveTypes[0];
            let templateRow = document.querySelector(".bomRow.d-none");
            let newRow = templateRow.cloneNode(true);
            newRow.querySelector(".bomRowType").innerText = eveType.name;
            newRow.querySelector(".bomRowCount").querySelector(".bomRowTotalInput").value = document.getElementById("newRowCount").value;
            const marketOrder = await getData("/home/GetMarketOrder?typeId=" + eveType.type_id)
            newRow.querySelector(".bomRowTotal").innerText = eveReadableIskValue(marketOrder.price);
            newRow.querySelector(".bomRowTotal").setAttribute("data-price", marketOrder.price);
            document.getElementById("newRowCount").value = 1;
            newRow.classList.remove("d-none");
            templateRow.after(newRow);
        } 
    }
    document.getElementById("newRowActionAdd").addEventListener("click", addBillOfMaterialsRow);

    async function getOrderValue(typeId){
        const marketOrder = await getData("/home/GetMarketOrder?typeId=" + typeId)
        return marketOrder.price;
    }

    function resetEveTypesDisplaySearchItems() {
        const searchResultsDiv = document.getElementById("eveTypeSearchResults");
        const oldEveTypes = searchResultsDiv.querySelectorAll("a");
        for (let i = 1; i < oldEveTypes.length; i++) {
            oldEveTypes[i].remove();
        }
    }

    function addEveTypesDisplaySearchItem(eveType) {
        const searchResultsDiv = document.getElementById("eveTypeSearchResults");
        const anchorTemplate = searchResultsDiv.querySelector("a");
        let newAnchor = anchorTemplate.cloneNode(true);
        newAnchor.querySelector("span").innerText = eveType.name;
        newAnchor.setAttribute("data-id", eveType.type_id);
        newAnchor.setAttribute("data-name", eveType.name);
        newAnchor.classList.remove("d-none");
        searchResultsDiv.append(newAnchor);
    }

    async function eveTypeSearchClicked(event) {
        const typeId = event.target.closest("a").getAttribute("data-id");
        const name = event.target.closest("a").getAttribute("data-name");
        document.getElementById("eveTypeSearchResults").classList.add("d-none");
        document.getElementById("newRowName").value = name
        const eveTypes = await eveTypesSearch(name);
        eveTypesDisplay(eveTypes);
        delayedEveTypeNameChange(name);
    }

    document.getElementById("eveTypeSearchResults").addEventListener("click", async (event) => await eveTypeSearchClicked(event));
    document.getElementById("newRowClearName").addEventListener("click", async (event) => {
        document.getElementById("newRowName").value = "";
        eveTypesDisplay([]);
    });

    async function getData(url) {
        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return await response.json();
        } catch (error) {
            console.error('Error:', error);
            throw error;
        }
    }

    let searchTimeoutId = null;
    const newRowName = document.getElementById("newRowName");
    newRowName.addEventListener("keyup", async (event) => {
        const beforeValue = event.target.value.trim();
        await delayedEveTypeNameChange(beforeValue, event);
    });

    async function delayedEveTypeNameChange(beforeValue, event = null) {
        if (beforeValue === "") {
            eveTypesDisplay([]);
            return;
        }
        await new Promise(r => setTimeout(r, 200));
        if (event && event.key === 'Enter') {
            if (searchTimeoutId) {
                clearTimeout(searchTimeoutId);
            }
            event.preventDefault();
            const eveTypes = await eveTypesSearch(beforeValue);
            eveTypesDisplay(eveTypes);
            document.getElementById("eveTypeSearchResults").classList.remove("d-none");
            return;
        } else {
            if (searchTimeoutId) {
                clearTimeout(searchTimeoutId);
            }
            searchTimeoutId = setTimeout(async () => {
                if (event && beforeValue === event.target.value.trim()) {
                    const eveTypes = await eveTypesSearch(beforeValue);
                    eveTypesDisplay(eveTypes);
                    document.getElementById("eveTypeSearchResults").classList.remove("d-none");
                }
            }, 200);
        }
    }

    document.getElementById("newRowName").addEventListener("focusin", () => {
        document.getElementById("eveTypeSearchResults").classList.remove("d-none");
    });

    function eveReadableIskValue(d) {
        if (d > 1000000000) { // billion
            return (d / 1000000000).toFixed(2) + "b";
        }
        if (d > 1000000) { // million
            return (d / 1000000).toFixed(2) + "m";
        }
        if (d > 1000) { // thousand
            return (d / 1000).toFixed(2) + "k";
        }
        return d.toFixed(0);
    }
</script>